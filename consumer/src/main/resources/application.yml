server:
  port: 8082

spring:
  jackson:
    property-naming-strategy: SNAKE_CASE
    default-property-inclusion: NON_NULL
    time-zone: UTC
    date-format: yyyy-MM-dd'T'HH:mm:ss.SSSX
    deserialization:
      fail-on-unknown-properties: false
  cloud:
    function:
      definition: person-consumer
    stream:
      default-binder: kafka



      bindings:
        person-consumer-in-0:
          destination: ${APP_TOPIC_PERSON:topic-capitole-protobuf-message}
          group: person-group
          content-type: application/x-protobuf
          consumer:
            use-native-decoding: true
      kafka:
        binder:
          brokers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
          replication-factor: ${APP_KAFKA_REPLICATION_FACTOR:1}
          auto-create-topics: ${APP_KAFKA_AUTO_CREATE_TOPICS:true}
          required-acks: all
          configuration:
            security.protocol: ${APP_KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
            sasl.mechanism: ${APP_KAFKA_SASL_MECHANISM:}
            ssl.truststore.location: ${APP_KAFKA_TRUSTSTORE:}
            sasl.jaas.config: ${APP_KAFKA_SASL_JAAS:}
          consumer-properties:
            key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
            value.deserializer: io.confluent.kafka.serializers.protobuf.KafkaProtobufDeserializer
            schema.registry.url: ${KAFKA_SCHEMA_REGISTRY_URL:http://localhost:8081}
            auto.register.schemas: true
            properties:
              specific.protobuf.value.type: com.capitole.challenge.cli.infrastructure.broker.proto.ProtoPerson
          min-partition-count: ${APP_KAFKA_PARTITION_COUNT:1}

#        bindings:
#          person-consumer--in-0:
#            consumer:
#              topic:
#                properties:
#                  retention.ms: 0
#                  schema.registry.url: ${KAFKA_SCHEMA_REGISTRY_URL:http://localhost:8081}

logging:
  level:
    org.zalando.logbook: TRACE
